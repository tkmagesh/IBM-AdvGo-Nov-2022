Magesh Kuppan

Schedule:
    Commence    : 9:30 AM
    Tea Break   : 11:00 AM (20 mins)
    Lunch Break : 1:00 PM (1 hr)
    Tea Break   : 3:30 PM (20 mins)
    Wind up     : 5:30 PM

Methodology:
    - No powerpoints
    - 100% hands on driven

Repo:
    https://github.com/tkmagesh/IBM-AdvGo-Nov-2022

About You:
    Name
    Primary Skillset
    Experience in Go
    Areas of interest in Go
    Have you attended My Go basics class?


CGO_ENABLED?

Concurrency:
    Ability to to have more than one execution path in the application

Assignment-1
    Write a goroutine that will generate the prime numbers between the given start and end
    Receive the prime numbers in the main function and print them as and when they are generated


Worker
    configure the number of tasks that can be executed concurrently
    execute the given task(s)
    request to shutdown the worker
        no new tasks should be allowed to be assigned
        wait for all the assigned tasks to complete

gRPC
    RPC (Remote Procedure Call)

    Where?
    Data Format?
    Application Protocol?

    .NET
        .NET Remoting
    Java
        Java RMI

    Protocol Buffers

    Tools
     Installation
        go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
        go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest

        (when the above is installed, executables are created in the gopath/bin folder. Make sure this path is set in environment variables)

        Windows
            Install the binaries from https://github.com/protocolbuffers/protobuf/releases/

        Mac
            brew install protoc-gen-go
            brew install protoc-gen-go-grpc

    Installation verification
        protoc --version

    Steps:
        1. Create the schema (protobuf)
            a. Service Contract
            b. Operation Contract(s)
            c. Data Contract(s)
    app structure
        /client
        /server
        /proto

    To Generate proxy & stub (run the command in the folder of go.mod file)
        protoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative proto/service.proto
    
    Communication Patterns
        - Request & Response
        - Server Streaming
        - Client Streaming
        - Bidirectional Streaming